cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
install.packages(c("Hmisc", "maptools", "matrixStats", "pdftools", "rgdal", "scales", "sp", "uuid", "vctrs", "zoo"))
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
library(CohortsExport)
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
run_app(baseUrl = 'http://api.ohdsi.org/WebAPI',
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
remotes::install_local()
remotes::install_local(force = TRUE)
## Local, CRAN or Package Manager ----
## This will build a tar.gz that can be installed locally,
## sent to CRAN, or to a package manager
devtools::build()
## If you want to deploy to ShinyProxy
golem::add_dockerfile_shinyproxy()
install.packages('dockerfiler')
## If you want to deploy to ShinyProxy
golem::add_dockerfile_shinyproxy()
?ROhdsiWebApi::authorizeWebApi
a <- ROhdsiWebApi::authorizeWebApi(
baseUrl = 'http://34.253.42.86:8080/WebAPI/',
authMethod = 'db',
webApiUsername = "demo",
webApiPassword = "biom_demo_demo"
)
ROhdsiWebApi:::getWebApiVersion(baseUrl = baseUrl)
ROhdsiWebApi:::getWebApiVersion(baseUrl = 'http://34.253.42.86:8080/WebAPI/')
ROhdsiWebApi:::getWebApiVersion(baseUrl = 'http://34.253.42.86:8080/WebAPI')
ROhdsiWebApi:::getWebApiVersion(baseUrl = 'http://34.253.42.86:8080/WebAPI')
ROhdsiWebApi::getDefinitionsMetadata(baseUrl = baseUrl,
category = 'cohort')
ROhdsiWebApi::getDefinitionsMetadata(baseUrl = 'http://34.253.42.86:8080/WebAPI/',
category = 'cohort')
a <- ROhdsiWebApi::authorizeWebApi(
baseUrl = 'http://34.253.42.86:8080/WebAPI/',
authMethod = 'db',
webApiUsername = "demo",
webApiPassword = "biom_demo_demo"
)
ROhdsiWebApi::getDefinitionsMetadata(baseUrl = 'http://34.253.42.86:8080/WebAPI/',
category = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
ROhdsiWebApi::authorizeWebApi(baseUrl = 'http://34.253.42.86:8080/WebAPI/',
authMethod = "db",
webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
webApiPassword = Sys.getenv("WEBAPI_PASSWORD"))
#
baseUrl = 'http://34.253.42.86:8080/WebAPI/'
# baseUrl = 'http://api.ohdsi.org/WebAPI'
# Run the application
run_app(baseUrl = baseUrl,
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
Sys.setenv(WEBAPI_PASSWORD = "biom_demo_demo")
Sys.setenv(WEBAPI_USERNAME = "demo")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
ROhdsiWebApi::authorizeWebApi(baseUrl = 'http://34.253.42.86:8080/WebAPI/',
authMethod = "db",
webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
webApiPassword = Sys.getenv("WEBAPI_PASSWORD"))
#
baseUrl = 'http://34.253.42.86:8080/WebAPI/'
# baseUrl = 'http://api.ohdsi.org/WebAPI'
# Run the application
run_app(baseUrl = baseUrl,
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
ROhdsiWebApi::authorizeWebApi(baseUrl = 'http://34.253.42.86:8080/WebAPI/',
authMethod = "db",
webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
webApiPassword = Sys.getenv("WEBAPI_PASSWORD"))
#
baseUrl = 'http://34.253.42.86:8080/WebAPI/'
# baseUrl = 'http://api.ohdsi.org/WebAPI'
# Run the application
run_app(baseUrl = baseUrl,
connection = connection,
cdmDbSchema = 'main',
vocabularyDatabaseSchema = 'main',
cohortTable = 'cohort')
Sys.setenv("DATABASECONNECTOR_JAR_FOLDER" = "/Users/vramella/R/drivers")
connection <- DatabaseConnector::connect(dbms = "postgresql",
server = "54.77.2.157/OMOP",
port = 5432,
user = "cdm1",
password = "biom_demo_cdm1")
sql <- "SELECT TOP 10 * FROM person;"
sql <- translate(sql, targetDialect = "postgresql")
library(SqlRender)
sql <- "SELECT TOP 10 * FROM person;"
sql <- translate(sql, targetDialect = "postgresql")
querySql(connection, sql)
library(DatabaseConnector)
querySql(connection, sql)
querySql(connection, "SELECT  * FROM OMOP.cdm1.DOSE_ERA LIMIT 1000;")
querySql(connection, "SELECT  * FROM DOSE_ERA LIMIT 1000;")
querySql(connection, "SELECT * FROM DOSE_ERA LIMIT 1000;")
shiny::runApp('~/R/CohortsExport_Demo')
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = "cdm1",
password = "biom_demo_cdm1",
server = "54.77.2.157/OMOP/cdm1",
port = 5432,
pathToDriver = "/Users/vramella/R/drivers")
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
connectionDetails <- Eunomia::getEunomiaConnectionDetails()
connection <- connect(connectionDetails = connectionDetails)
createConnectionDetails(dbms = "postgresql",
user = "cdm1",
password = "biom_demo_cdm1",
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = "/Users/vramella/R/drivers")
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = "cdm1",
password = "biom_demo_cdm1",
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = "/Users/vramella/R/drivers")
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
shiny::runApp('~/R/prova_conn_ATLAS')
runApp('~/R/prova_conn_ATLAS')
runApp('~/R/prova_conn_ATLAS')
runApp('~/R/prova_conn_ATLAS')
runApp('~/R/prova_conn_ATLAS')
connectionDetails <- createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = "/Users/vramella/R/drivers")
connection <- connect(connectionDetails = connectionDetails)
sql <- "SELECT TOP 10 * FROM person;"
sql <- translate(sql, targetDialect = "postgresql")
results <- querySql(connection, sql = sql)
View(results)
shiny::runApp('~/R/prova_conn_ATLAS')
connectionDetails <- createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = "/Users/vramella/R/drivers")
connection <- connect(connectionDetails = connectionDetails)
sql <- "SELECT TOP 10 * FROM person;"
sql <- translate(sql, targetDialect = "postgresql")
querySql(connection, sql = sql)
runApp('~/R/prova_conn_ATLAS')
runApp('~/R/prova_conn_ATLAS')
runApp('~/R/prova_conn_ATLAS')
runApp('~/R/prova_conn_ATLAS')
runApp('~/R/prova_conn_ATLAS')
runApp('~/R/prova_conn_ATLAS')
runApp('~/R/prova_conn_ATLAS')
shiny::runApp('~/R/prova_conn_ATLAS')
runApp('~/R/prova_conn_ATLAS')
connectionDetails <- createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = "/Users/vramella/R/drivers")
connection <- connect(connectionDetails = connectionDetails)
sql <- "SELECT TOP 10 * FROM person;"
sql <- translate(sql, targetDialect = "postgresql")
results <- querySql(connect(connectionDetails = connectionDetails), sql = sql)
disconnect(connection)
View(results)
runApp('~/R/prova_conn_ATLAS')
?dataTableOutput
runApp('~/R/prova_conn_ATLAS')
runApp('~/R/prova_conn_ATLAS')
runApp('~/R/prova_conn_ATLAS')
runApp('~/R/prova_conn_ATLAS')
library(DatabaseConnector)
con <- connect(dbms = "postgresql", connectionString = "jdbc:postgresql://54.77.2.157:5432/OMOP", user = "cdm1", password = password)
connectionDetails <- createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = "/Users/vramella/R/drivers")
connection <- connect(connectionDetails = connectionDetails)
querySql(connection = connection, sql = 'SELECT * FROM @cdm.cdm_source;')
querySql(connection = connection, sql = 'SELECT * FROM cdm1.cdm_source;')
querySql(connection = connection, sql = 'SELECT * FROM cdm_source;')
connectionDetails <- createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = "/Users/vramella/R/drivers")
connection <- connect(connectionDetails = connectionDetails)
querySql(connection = connection, sql = 'SELECT * FROM omop.cdm1.cdm_source;')
connectionDetails <- createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = "/Users/vramella/R/drivers")
connection <- connect(connectionDetails = connectionDetails)
querySql(connection = connection, sql = 'SELECT * FROM PERSON LIMIT 5;')
querySql(connection = connection, sql = 'SELECT * FROM CDM_SOURCE;')
cdm_source <- querySql(connection = connection, sql = 'SELECT * FROM CDM_SOURCE;')
View(cdm_source)
runApp('~/R/prova_conn_ATLAS')
connectionDetails <- createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = "/Users/vramella/R/drivers")
connection <- connect(connectionDetails = connectionDetails)
sql <- 'SELECT * FROM cdm1.CDM_SOURCE;'
sql <- translate(sql, targetDialect = "postgresql")
rm(results)
results <- querySql(connection, sql = sql)
View(results)
disconnect(connection)
