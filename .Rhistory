names(tojoin) <- orig
plData <- plData %>%
dplyr::left_join(., conceptTable, by = tojoin) %>%
dplyr::select(c(1:grep(i, colnames(.))), CONCEPT_NAME, everything()) %>%
dplyr::rename_at('CONCEPT_NAME', ~sub("ID", "NAME", i))
}
}
cdmDbSchema <- "cdm1"
if (length(concept_ids)){
sql <- 'SELECT CONCEPT_ID, CONCEPT_NAME FROM @cdm.concept WHERE CONCEPT_ID IN (@concept_id)'
for (i in concept_ids) {
conceptTable <- DatabaseConnector::renderTranslateQuerySql(connection = connection,
sql = sql,
cdm = cdmDbSchema,
concept_id = unique(plData[,i]))
orig <- i
tojoin <- c('CONCEPT_ID')
names(tojoin) <- orig
plData <- plData %>%
dplyr::left_join(., conceptTable, by = tojoin) %>%
dplyr::select(c(1:grep(i, colnames(.))), CONCEPT_NAME, everything()) %>%
dplyr::rename_at('CONCEPT_NAME', ~sub("ID", "NAME", i))
}
}
library(dplyr)
if (length(concept_ids)){
sql <- 'SELECT CONCEPT_ID, CONCEPT_NAME FROM @cdm.concept WHERE CONCEPT_ID IN (@concept_id)'
for (i in concept_ids) {
conceptTable <- DatabaseConnector::renderTranslateQuerySql(connection = connection,
sql = sql,
cdm = cdmDbSchema,
concept_id = unique(plData[,i]))
orig <- i
tojoin <- c('CONCEPT_ID')
names(tojoin) <- orig
plData <- plData %>%
dplyr::left_join(., conceptTable, by = tojoin) %>%
dplyr::select(c(1:grep(i, colnames(.))), CONCEPT_NAME, everything()) %>%
dplyr::rename_at('CONCEPT_NAME', ~sub("ID", "NAME", i))
}
}
View(plData)
View(cohortTable)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application with Eunomia and OHDSI demo ATLAS
# baseUrl = 'http://api.ohdsi.org/WebAPI'
# run_app(baseUrl = baseUrl,
#         connection = connection,
#         cdmDbSchema = 'main',
#         vocabularyDatabaseSchema = 'main',
#         cohortTable = 'cohort')
# Run the application with Eunomia and BIOMERIS demo ATLAS
# baseUrl = 'http://34.253.42.86:8080/WebAPI'
# run_app(baseUrl = baseUrl,
#         authMethod = "db",
#         webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
#         webApiPassword = Sys.getenv("WEBAPI_PASSWORD"),
#         connection = connection,
#         cdmDbSchema = 'main',
#         vocabularyDatabaseSchema = 'main',
#         cohortTable = 'cohort')
# Run the application with cdm1 demo and BIOMERIS demo ATLAS
pathToDriver <- "/Users/vramella/R/drivers"
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = pathToDriver)
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
baseUrl = 'http://34.253.42.86:8080/WebAPI'
run_app(baseUrl = baseUrl,
authMethod = "db",
webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
webApiPassword = Sys.getenv("WEBAPI_PASSWORD"),
connection = connection,
cdmDbSchema = 'cdm1',
vocabularyDatabaseSchema = 'cdm1',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application with Eunomia and OHDSI demo ATLAS
# baseUrl = 'http://api.ohdsi.org/WebAPI'
# run_app(baseUrl = baseUrl,
#         connection = connection,
#         cdmDbSchema = 'main',
#         vocabularyDatabaseSchema = 'main',
#         cohortTable = 'cohort')
# Run the application with Eunomia and BIOMERIS demo ATLAS
# baseUrl = 'http://34.253.42.86:8080/WebAPI'
# run_app(baseUrl = baseUrl,
#         authMethod = "db",
#         webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
#         webApiPassword = Sys.getenv("WEBAPI_PASSWORD"),
#         connection = connection,
#         cdmDbSchema = 'main',
#         vocabularyDatabaseSchema = 'main',
#         cohortTable = 'cohort')
# Run the application with cdm1 demo and BIOMERIS demo ATLAS
pathToDriver <- "/Users/vramella/R/drivers"
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = pathToDriver)
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
baseUrl = 'http://34.253.42.86:8080/WebAPI'
run_app(baseUrl = baseUrl,
authMethod = "db",
webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
webApiPassword = Sys.getenv("WEBAPI_PASSWORD"),
connection = connection,
cdmDbSchema = 'cdm1',
vocabularyDatabaseSchema = 'cdm1',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application with Eunomia and OHDSI demo ATLAS
# baseUrl = 'http://api.ohdsi.org/WebAPI'
# run_app(baseUrl = baseUrl,
#         connection = connection,
#         cdmDbSchema = 'main',
#         vocabularyDatabaseSchema = 'main',
#         cohortTable = 'cohort')
# Run the application with Eunomia and BIOMERIS demo ATLAS
# baseUrl = 'http://34.253.42.86:8080/WebAPI'
# run_app(baseUrl = baseUrl,
#         authMethod = "db",
#         webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
#         webApiPassword = Sys.getenv("WEBAPI_PASSWORD"),
#         connection = connection,
#         cdmDbSchema = 'main',
#         vocabularyDatabaseSchema = 'main',
#         cohortTable = 'cohort')
# Run the application with cdm1 demo and BIOMERIS demo ATLAS
pathToDriver <- "/Users/vramella/R/drivers"
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = pathToDriver)
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
baseUrl = 'http://34.253.42.86:8080/WebAPI'
run_app(baseUrl = baseUrl,
authMethod = "db",
webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
webApiPassword = Sys.getenv("WEBAPI_PASSWORD"),
connection = connection,
cdmDbSchema = 'cdm1',
vocabularyDatabaseSchema = 'cdm1',
cohortTable = 'cohort')
pathToDriver <- "/Users/vramella/R/drivers"
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = pathToDriver)
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
sql <- paste0('SELECT * FROM @cdm.@cdm_table WHERE person_id IN (@person_id)')
sql <- paste0('SELECT * FROM cdm1.DEVICE_EXPOSURE WHERE person_id IN (@person_id)')
plData <- DatabaseConnector::renderTranslateQuerySql(connection = connection,
sql = sql,
person_id = cohortTable$SUBJECT_ID)
concept_ids <- grep("CONCEPT_ID", colnames(plData), value = TRUE)
if (length(concept_ids)){
sql <- 'SELECT CONCEPT_ID, CONCEPT_NAME FROM @cdm.concept WHERE CONCEPT_ID IN (@concept_id)'
for (i in concept_ids) {
conceptTable <- DatabaseConnector::renderTranslateQuerySql(connection = connection,
sql = sql,
cdm = cdmDbSchema,
concept_id = unique(plData[,i]))
orig <- i
tojoin <- c('CONCEPT_ID')
names(tojoin) <- orig
plData <- plData %>%
dplyr::left_join(., conceptTable, by = tojoin) %>%
dplyr::select(c(1:grep(i, colnames(.))), CONCEPT_NAME, everything()) %>%
dplyr::rename_at('CONCEPT_NAME', ~sub("ID", "NAME", i))
}
}
concept_ids
i = "DEVICE_CONCEPT_ID"
conceptTable <- DatabaseConnector::renderTranslateQuerySql(connection = connection,
sql = sql,
cdm = cdmDbSchema,
concept_id = unique(plData[,i]))
orig <- i
tojoin <- c('CONCEPT_ID')
names(tojoin) <- orig
plData <- plData %>%
dplyr::left_join(., conceptTable, by = tojoin) %>%
dplyr::select(c(1:grep(i, colnames(.))), CONCEPT_NAME, everything()) %>%
dplyr::rename_at('CONCEPT_NAME', ~sub("ID", "NAME", i))
View(plData)
sql <- paste0('SELECT * FROM cdm1.DEVICE_EXPOSURE WHERE person_id IN (@person_id)')
plData <- DatabaseConnector::renderTranslateQuerySql(connection = connection,
sql = sql,
person_id = cohortTable$SUBJECT_ID)
View(plData)
plData <- plData %>% select(-c("DEVICE_CONCEPT_NAME"))
plData <- plData %>% dplyr::select(-c("DEVICE_CONCEPT_NAME"))
plData <- plData %>% dplyr::select(-c("DEVICE_TYPE_CONCEPT_NAME"))
plData <- plData %>% dplyr::select(-c("DEVICE_SOURCE_CONCEPT_NAME"))
concept_id = 0L
i = concept_ids[length(concept_ids)]
sql <- 'SELECT CONCEPT_ID, CONCEPT_NAME FROM @cdm.CONCEPT WHERE CONCEPT_ID IN (@concept_id)'
conceptTable <- DatabaseConnector::renderTranslateQuerySql(connection = connection,
sql = sql,
cdm = cdmDbSchema,
concept_id = unique(plData[,i]))
pathToDriver <- "/Users/vramella/R/drivers"
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = pathToDriver)
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
library(dplyr)
sql <- paste0('SELECT * FROM @cdm.@cdm_table WHERE person_id IN (@person_id)')
sql <- 'SELECT * FROM cdm1.cohort'
cohortTable <- DatabaseConnector::renderTranslateQuerySql(connection = connection, sql = sql)
history
history()
sql <- paste0('SELECT * FROM cdm1.DEVICE_EXPOSURE WHERE person_id IN (@person_id)')
plData <- DatabaseConnector::renderTranslateQuerySql(connection = connection, person_id = cohortTable$SUBJECT_ID)
plData <- DatabaseConnector::renderTranslateQuerySql(connection = connection, sql= sql, person_id = cohortTable$SUBJECT_ID)
concept_ids <- grep("CONCEPT_ID", colnames(plData), value = TRUE)
i = concept_ids[length(concept_ids)]
sql <- 'SELECT CONCEPT_ID, CONCEPT_NAME FROM @cdm.CONCEPT WHERE CONCEPT_ID IN (@concept_id)'
unique(plData[,i])
conceptTable <- data.frame("CONCEPT_ID", "CONCEPT_NAME")
View(conceptTable)
conceptTable <- setNames(data.frame(matrix(ncol = 2, nrow = 0)), c("CONCEPT_ID", "CONCEPT_NAME"))
orig <- i
tojoin <- c('CONCEPT_ID')
names(tojoin) <- orig
plData <- plData %>%
dplyr::left_join(., conceptTable, by = tojoin) %>%
dplyr::select(c(1:grep(i, colnames(.))), CONCEPT_NAME, everything()) %>%
dplyr::rename_at('CONCEPT_NAME', ~sub("ID", "NAME", i))
View(plData)
length(unique(plData[,i]))
unique(plData[,i])
unique(plData[,i]) == "NA"
is.na(unique(plData[,i]))
a <- unique(plData[,i])
i
plData <- plData %>% select(-c("UNIT_SOURCE_CONCEPT_NAME"))
concept_ids <- grep("CONCEPT_ID", colnames(plData), value = TRUE)
if (length(concept_ids)){
sql <- 'SELECT CONCEPT_ID, CONCEPT_NAME FROM @cdm.CONCEPT WHERE CONCEPT_ID IN (@concept_id)'
for (i in concept_ids) {
if(!(is.na(unique(plData[,i])))){
conceptTable <- DatabaseConnector::renderTranslateQuerySql(connection = connection,
sql = sql,
cdm = cdmDbSchema,
concept_id = unique(plData[,i]))
} else {
conceptTable <- setNames(data.frame(matrix(ncol = 2, nrow = 0)), c("CONCEPT_ID", "CONCEPT_NAME"))
}
orig <- i
tojoin <- c('CONCEPT_ID')
names(tojoin) <- orig
plData <- plData %>%
dplyr::left_join(., conceptTable, by = tojoin) %>%
dplyr::select(c(1:grep(i, colnames(.))), CONCEPT_NAME, everything()) %>%
dplyr::rename_at('CONCEPT_NAME', ~sub("ID", "NAME", i))
}
}
cdmDbSchema = "cdm1"
i = orig
unique(plData[!is.na(plData), i])
a <- unique(plData[!is.na(plData), i])
a <- unique(na.omit(plData[,i]))
unique(plData[,i])
rm(a)
a <- unique(na.omit(plData[,i]))
is.na(a)
length(a)
length(na.omit(plData[,i]))
na.omit(plData[,i])
a <- na.omit(plData[,i])
plData[,i]
a <- plData[,i]
a <- na.omit(a)
concept_ids <- grep("CONCEPT_ID", colnames(plData), value = TRUE)
if (length(concept_ids)){
sql <- 'SELECT CONCEPT_ID, CONCEPT_NAME FROM @cdm.CONCEPT WHERE CONCEPT_ID IN (@concept_id)'
for (i in concept_ids) {
if(length(na.omit(plData[,i]))){
conceptTable <- DatabaseConnector::renderTranslateQuerySql(connection = connection,
sql = sql,
cdm = cdmDbSchema,
concept_id = unique(plData[,i]))
} else {
conceptTable <- setNames(data.frame(matrix(ncol = 2, nrow = 0)), c("CONCEPT_ID", "CONCEPT_NAME"))
}
orig <- i
tojoin <- c('CONCEPT_ID')
names(tojoin) <- orig
plData <- plData %>%
dplyr::left_join(., conceptTable, by = tojoin) %>%
dplyr::select(c(1:grep(i, colnames(.))), CONCEPT_NAME, everything()) %>%
dplyr::rename_at('CONCEPT_NAME', ~sub("ID", "NAME", i))
}
}
pathToDriver <- "/Users/vramella/R/drivers"
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = pathToDriver)
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
concept_ids <- grep("CONCEPT_ID", colnames(plData), value = TRUE)
if (length(concept_ids)){
sql <- 'SELECT CONCEPT_ID, CONCEPT_NAME FROM @cdm.CONCEPT WHERE CONCEPT_ID IN (@concept_id)'
for (i in concept_ids) {
if(length(na.omit(plData[,i]))){
conceptTable <- DatabaseConnector::renderTranslateQuerySql(connection = connection,
sql = sql,
cdm = cdmDbSchema,
concept_id = unique(plData[,i]))
} else {
conceptTable <- setNames(data.frame(matrix(ncol = 2, nrow = 0)), c("CONCEPT_ID", "CONCEPT_NAME"))
}
orig <- i
tojoin <- c('CONCEPT_ID')
names(tojoin) <- orig
plData <- plData %>%
dplyr::left_join(., conceptTable, by = tojoin) %>%
dplyr::select(c(1:grep(i, colnames(.))), CONCEPT_NAME, everything()) %>%
dplyr::rename_at('CONCEPT_NAME', ~sub("ID", "NAME", i))
}
}
View(plData)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application with Eunomia and OHDSI demo ATLAS
# baseUrl = 'http://api.ohdsi.org/WebAPI'
# run_app(baseUrl = baseUrl,
#         connection = connection,
#         cdmDbSchema = 'main',
#         vocabularyDatabaseSchema = 'main',
#         cohortTable = 'cohort')
# Run the application with Eunomia and BIOMERIS demo ATLAS
# baseUrl = 'http://34.253.42.86:8080/WebAPI'
# run_app(baseUrl = baseUrl,
#         authMethod = "db",
#         webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
#         webApiPassword = Sys.getenv("WEBAPI_PASSWORD"),
#         connection = connection,
#         cdmDbSchema = 'main',
#         vocabularyDatabaseSchema = 'main',
#         cohortTable = 'cohort')
# Run the application with cdm1 demo and BIOMERIS demo ATLAS
pathToDriver <- "/Users/vramella/R/drivers"
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = pathToDriver)
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
baseUrl = 'http://34.253.42.86:8080/WebAPI'
run_app(baseUrl = baseUrl,
authMethod = "db",
webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
webApiPassword = Sys.getenv("WEBAPI_PASSWORD"),
connection = connection,
cdmDbSchema = 'cdm1',
vocabularyDatabaseSchema = 'cdm1',
cohortTable = 'cohort')
pathToDriver <- "/Users/vramella/R/drivers"
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = pathToDriver)
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
DatabaseConnector::dbListFields(connection, "CONDITION_OCCURRENCE")
toupper(DatabaseConnector::dbListFields(connection, table))
DatabaseConnector::dbListFields(connection, table)
toupper(DatabaseConnector::dbListFields(connection, "CONDITION_OCCURRENCE"))
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application with Eunomia and OHDSI demo ATLAS
# baseUrl = 'http://api.ohdsi.org/WebAPI'
# run_app(baseUrl = baseUrl,
#         connection = connection,
#         cdmDbSchema = 'main',
#         vocabularyDatabaseSchema = 'main',
#         cohortTable = 'cohort')
# Run the application with Eunomia and BIOMERIS demo ATLAS
# baseUrl = 'http://34.253.42.86:8080/WebAPI'
# run_app(baseUrl = baseUrl,
#         authMethod = "db",
#         webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
#         webApiPassword = Sys.getenv("WEBAPI_PASSWORD"),
#         connection = connection,
#         cdmDbSchema = 'main',
#         vocabularyDatabaseSchema = 'main',
#         cohortTable = 'cohort')
# Run the application with cdm1 demo and BIOMERIS demo ATLAS
pathToDriver <- "/Users/vramella/R/drivers"
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = pathToDriver)
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
baseUrl = 'http://34.253.42.86:8080/WebAPI'
run_app(baseUrl = baseUrl,
authMethod = "db",
webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
webApiPassword = Sys.getenv("WEBAPI_PASSWORD"),
connection = connection,
cdmDbSchema = 'cdm1',
vocabularyDatabaseSchema = 'cdm1',
cohortTable = 'cohort')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# connection = DatabaseConnector::connect(connectionDetails = Eunomia::getEunomiaConnectionDetails())
# Run the application with Eunomia and OHDSI demo ATLAS
# baseUrl = 'http://api.ohdsi.org/WebAPI'
# run_app(baseUrl = baseUrl,
#         connection = connection,
#         cdmDbSchema = 'main',
#         vocabularyDatabaseSchema = 'main',
#         cohortTable = 'cohort')
# Run the application with Eunomia and BIOMERIS demo ATLAS
# baseUrl = 'http://34.253.42.86:8080/WebAPI'
# run_app(baseUrl = baseUrl,
#         authMethod = "db",
#         webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
#         webApiPassword = Sys.getenv("WEBAPI_PASSWORD"),
#         connection = connection,
#         cdmDbSchema = 'main',
#         vocabularyDatabaseSchema = 'main',
#         cohortTable = 'cohort')
# Run the application with cdm1 demo and BIOMERIS demo ATLAS
pathToDriver <- "/Users/vramella/R/drivers"
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = "postgresql",
user = Sys.getenv("CDM_USERNAME"),
password = Sys.getenv("CDM_PASSWORD"),
server = "54.77.2.157/OMOP",
port = 5432,
pathToDriver = pathToDriver)
connection <- DatabaseConnector::connect(connectionDetails = connectionDetails)
baseUrl = 'http://34.253.42.86:8080/WebAPI'
run_app(baseUrl = baseUrl,
authMethod = "db",
webApiUsername = Sys.getenv("WEBAPI_USERNAME"),
webApiPassword = Sys.getenv("WEBAPI_PASSWORD"),
connection = connection,
cdmDbSchema = 'cdm1',
vocabularyDatabaseSchema = 'cdm1',
cohortTable = 'cohort')
